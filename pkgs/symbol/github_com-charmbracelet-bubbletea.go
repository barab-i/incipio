// Code generated by 'yaegi extract github.com/charmbracelet/bubbletea'. DO NOT EDIT.

package symbol

import (
	"github.com/charmbracelet/bubbletea"
	"io"
	"reflect"
)

func init() {
	Symbols["github.com/charmbracelet/bubbletea/tea"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Batch":                 reflect.ValueOf(tea.Batch),
		"ClearScreen":           reflect.ValueOf(tea.ClearScreen),
		"ClearScrollArea":       reflect.ValueOf(tea.ClearScrollArea),
		"DisableBracketedPaste": reflect.ValueOf(tea.DisableBracketedPaste),
		"DisableMouse":          reflect.ValueOf(tea.DisableMouse),
		"DisableReportFocus":    reflect.ValueOf(tea.DisableReportFocus),
		"EnableBracketedPaste":  reflect.ValueOf(tea.EnableBracketedPaste),
		"EnableMouseAllMotion":  reflect.ValueOf(tea.EnableMouseAllMotion),
		"EnableMouseCellMotion": reflect.ValueOf(tea.EnableMouseCellMotion),
		"EnableReportFocus":     reflect.ValueOf(tea.EnableReportFocus),
		"EnterAltScreen":        reflect.ValueOf(tea.EnterAltScreen),
		"ErrInterrupted":        reflect.ValueOf(&tea.ErrInterrupted).Elem(),
		"ErrProgramKilled":      reflect.ValueOf(&tea.ErrProgramKilled).Elem(),
		"ErrProgramPanic":       reflect.ValueOf(&tea.ErrProgramPanic).Elem(),
		"Every":                 reflect.ValueOf(tea.Every),
		"Exec":                  reflect.ValueOf(tea.Exec),
		"ExecProcess":           reflect.ValueOf(tea.ExecProcess),
		"ExitAltScreen":         reflect.ValueOf(tea.ExitAltScreen),
		"HideCursor":            reflect.ValueOf(tea.HideCursor),
		"Interrupt":             reflect.ValueOf(tea.Interrupt),
		"KeyBackspace":          reflect.ValueOf(tea.KeyBackspace),
		"KeyBreak":              reflect.ValueOf(tea.KeyBreak),
		"KeyCtrlA":              reflect.ValueOf(tea.KeyCtrlA),
		"KeyCtrlAt":             reflect.ValueOf(tea.KeyCtrlAt),
		"KeyCtrlB":              reflect.ValueOf(tea.KeyCtrlB),
		"KeyCtrlBackslash":      reflect.ValueOf(tea.KeyCtrlBackslash),
		"KeyCtrlC":              reflect.ValueOf(tea.KeyCtrlC),
		"KeyCtrlCaret":          reflect.ValueOf(tea.KeyCtrlCaret),
		"KeyCtrlCloseBracket":   reflect.ValueOf(tea.KeyCtrlCloseBracket),
		"KeyCtrlD":              reflect.ValueOf(tea.KeyCtrlD),
		"KeyCtrlDown":           reflect.ValueOf(tea.KeyCtrlDown),
		"KeyCtrlE":              reflect.ValueOf(tea.KeyCtrlE),
		"KeyCtrlEnd":            reflect.ValueOf(tea.KeyCtrlEnd),
		"KeyCtrlF":              reflect.ValueOf(tea.KeyCtrlF),
		"KeyCtrlG":              reflect.ValueOf(tea.KeyCtrlG),
		"KeyCtrlH":              reflect.ValueOf(tea.KeyCtrlH),
		"KeyCtrlHome":           reflect.ValueOf(tea.KeyCtrlHome),
		"KeyCtrlI":              reflect.ValueOf(tea.KeyCtrlI),
		"KeyCtrlJ":              reflect.ValueOf(tea.KeyCtrlJ),
		"KeyCtrlK":              reflect.ValueOf(tea.KeyCtrlK),
		"KeyCtrlL":              reflect.ValueOf(tea.KeyCtrlL),
		"KeyCtrlLeft":           reflect.ValueOf(tea.KeyCtrlLeft),
		"KeyCtrlM":              reflect.ValueOf(tea.KeyCtrlM),
		"KeyCtrlN":              reflect.ValueOf(tea.KeyCtrlN),
		"KeyCtrlO":              reflect.ValueOf(tea.KeyCtrlO),
		"KeyCtrlOpenBracket":    reflect.ValueOf(tea.KeyCtrlOpenBracket),
		"KeyCtrlP":              reflect.ValueOf(tea.KeyCtrlP),
		"KeyCtrlPgDown":         reflect.ValueOf(tea.KeyCtrlPgDown),
		"KeyCtrlPgUp":           reflect.ValueOf(tea.KeyCtrlPgUp),
		"KeyCtrlQ":              reflect.ValueOf(tea.KeyCtrlQ),
		"KeyCtrlQuestionMark":   reflect.ValueOf(tea.KeyCtrlQuestionMark),
		"KeyCtrlR":              reflect.ValueOf(tea.KeyCtrlR),
		"KeyCtrlRight":          reflect.ValueOf(tea.KeyCtrlRight),
		"KeyCtrlS":              reflect.ValueOf(tea.KeyCtrlS),
		"KeyCtrlShiftDown":      reflect.ValueOf(tea.KeyCtrlShiftDown),
		"KeyCtrlShiftEnd":       reflect.ValueOf(tea.KeyCtrlShiftEnd),
		"KeyCtrlShiftHome":      reflect.ValueOf(tea.KeyCtrlShiftHome),
		"KeyCtrlShiftLeft":      reflect.ValueOf(tea.KeyCtrlShiftLeft),
		"KeyCtrlShiftRight":     reflect.ValueOf(tea.KeyCtrlShiftRight),
		"KeyCtrlShiftUp":        reflect.ValueOf(tea.KeyCtrlShiftUp),
		"KeyCtrlT":              reflect.ValueOf(tea.KeyCtrlT),
		"KeyCtrlU":              reflect.ValueOf(tea.KeyCtrlU),
		"KeyCtrlUnderscore":     reflect.ValueOf(tea.KeyCtrlUnderscore),
		"KeyCtrlUp":             reflect.ValueOf(tea.KeyCtrlUp),
		"KeyCtrlV":              reflect.ValueOf(tea.KeyCtrlV),
		"KeyCtrlW":              reflect.ValueOf(tea.KeyCtrlW),
		"KeyCtrlX":              reflect.ValueOf(tea.KeyCtrlX),
		"KeyCtrlY":              reflect.ValueOf(tea.KeyCtrlY),
		"KeyCtrlZ":              reflect.ValueOf(tea.KeyCtrlZ),
		"KeyDelete":             reflect.ValueOf(tea.KeyDelete),
		"KeyDown":               reflect.ValueOf(tea.KeyDown),
		"KeyEnd":                reflect.ValueOf(tea.KeyEnd),
		"KeyEnter":              reflect.ValueOf(tea.KeyEnter),
		"KeyEsc":                reflect.ValueOf(tea.KeyEsc),
		"KeyEscape":             reflect.ValueOf(tea.KeyEscape),
		"KeyF1":                 reflect.ValueOf(tea.KeyF1),
		"KeyF10":                reflect.ValueOf(tea.KeyF10),
		"KeyF11":                reflect.ValueOf(tea.KeyF11),
		"KeyF12":                reflect.ValueOf(tea.KeyF12),
		"KeyF13":                reflect.ValueOf(tea.KeyF13),
		"KeyF14":                reflect.ValueOf(tea.KeyF14),
		"KeyF15":                reflect.ValueOf(tea.KeyF15),
		"KeyF16":                reflect.ValueOf(tea.KeyF16),
		"KeyF17":                reflect.ValueOf(tea.KeyF17),
		"KeyF18":                reflect.ValueOf(tea.KeyF18),
		"KeyF19":                reflect.ValueOf(tea.KeyF19),
		"KeyF2":                 reflect.ValueOf(tea.KeyF2),
		"KeyF20":                reflect.ValueOf(tea.KeyF20),
		"KeyF3":                 reflect.ValueOf(tea.KeyF3),
		"KeyF4":                 reflect.ValueOf(tea.KeyF4),
		"KeyF5":                 reflect.ValueOf(tea.KeyF5),
		"KeyF6":                 reflect.ValueOf(tea.KeyF6),
		"KeyF7":                 reflect.ValueOf(tea.KeyF7),
		"KeyF8":                 reflect.ValueOf(tea.KeyF8),
		"KeyF9":                 reflect.ValueOf(tea.KeyF9),
		"KeyHome":               reflect.ValueOf(tea.KeyHome),
		"KeyInsert":             reflect.ValueOf(tea.KeyInsert),
		"KeyLeft":               reflect.ValueOf(tea.KeyLeft),
		"KeyNull":               reflect.ValueOf(tea.KeyNull),
		"KeyPgDown":             reflect.ValueOf(tea.KeyPgDown),
		"KeyPgUp":               reflect.ValueOf(tea.KeyPgUp),
		"KeyRight":              reflect.ValueOf(tea.KeyRight),
		"KeyRunes":              reflect.ValueOf(tea.KeyRunes),
		"KeyShiftDown":          reflect.ValueOf(tea.KeyShiftDown),
		"KeyShiftEnd":           reflect.ValueOf(tea.KeyShiftEnd),
		"KeyShiftHome":          reflect.ValueOf(tea.KeyShiftHome),
		"KeyShiftLeft":          reflect.ValueOf(tea.KeyShiftLeft),
		"KeyShiftRight":         reflect.ValueOf(tea.KeyShiftRight),
		"KeyShiftTab":           reflect.ValueOf(tea.KeyShiftTab),
		"KeyShiftUp":            reflect.ValueOf(tea.KeyShiftUp),
		"KeySpace":              reflect.ValueOf(tea.KeySpace),
		"KeyTab":                reflect.ValueOf(tea.KeyTab),
		"KeyUp":                 reflect.ValueOf(tea.KeyUp),
		"LogToFile":             reflect.ValueOf(tea.LogToFile),
		"LogToFileWith":         reflect.ValueOf(tea.LogToFileWith),
		"MouseActionMotion":     reflect.ValueOf(tea.MouseActionMotion),
		"MouseActionPress":      reflect.ValueOf(tea.MouseActionPress),
		"MouseActionRelease":    reflect.ValueOf(tea.MouseActionRelease),
		"MouseBackward":         reflect.ValueOf(tea.MouseBackward),
		"MouseButton10":         reflect.ValueOf(tea.MouseButton10),
		"MouseButton11":         reflect.ValueOf(tea.MouseButton11),
		"MouseButtonBackward":   reflect.ValueOf(tea.MouseButtonBackward),
		"MouseButtonForward":    reflect.ValueOf(tea.MouseButtonForward),
		"MouseButtonLeft":       reflect.ValueOf(tea.MouseButtonLeft),
		"MouseButtonMiddle":     reflect.ValueOf(tea.MouseButtonMiddle),
		"MouseButtonNone":       reflect.ValueOf(tea.MouseButtonNone),
		"MouseButtonRight":      reflect.ValueOf(tea.MouseButtonRight),
		"MouseButtonWheelDown":  reflect.ValueOf(tea.MouseButtonWheelDown),
		"MouseButtonWheelLeft":  reflect.ValueOf(tea.MouseButtonWheelLeft),
		"MouseButtonWheelRight": reflect.ValueOf(tea.MouseButtonWheelRight),
		"MouseButtonWheelUp":    reflect.ValueOf(tea.MouseButtonWheelUp),
		"MouseForward":          reflect.ValueOf(tea.MouseForward),
		"MouseLeft":             reflect.ValueOf(tea.MouseLeft),
		"MouseMiddle":           reflect.ValueOf(tea.MouseMiddle),
		"MouseMotion":           reflect.ValueOf(tea.MouseMotion),
		"MouseRelease":          reflect.ValueOf(tea.MouseRelease),
		"MouseRight":            reflect.ValueOf(tea.MouseRight),
		"MouseUnknown":          reflect.ValueOf(tea.MouseUnknown),
		"MouseWheelDown":        reflect.ValueOf(tea.MouseWheelDown),
		"MouseWheelLeft":        reflect.ValueOf(tea.MouseWheelLeft),
		"MouseWheelRight":       reflect.ValueOf(tea.MouseWheelRight),
		"MouseWheelUp":          reflect.ValueOf(tea.MouseWheelUp),
		"NewProgram":            reflect.ValueOf(tea.NewProgram),
		"Printf":                reflect.ValueOf(tea.Printf),
		"Println":               reflect.ValueOf(tea.Println),
		"Quit":                  reflect.ValueOf(tea.Quit),
		"ScrollDown":            reflect.ValueOf(tea.ScrollDown),
		"ScrollUp":              reflect.ValueOf(tea.ScrollUp),
		"Sequence":              reflect.ValueOf(tea.Sequence),
		"Sequentially":          reflect.ValueOf(tea.Sequentially),
		"SetWindowTitle":        reflect.ValueOf(tea.SetWindowTitle),
		"ShowCursor":            reflect.ValueOf(tea.ShowCursor),
		"Suspend":               reflect.ValueOf(tea.Suspend),
		"SyncScrollArea":        reflect.ValueOf(tea.SyncScrollArea),
		"Tick":                  reflect.ValueOf(tea.Tick),
		"WindowSize":            reflect.ValueOf(tea.WindowSize),
		"WithANSICompressor":    reflect.ValueOf(tea.WithANSICompressor),
		"WithAltScreen":         reflect.ValueOf(tea.WithAltScreen),
		"WithContext":           reflect.ValueOf(tea.WithContext),
		"WithEnvironment":       reflect.ValueOf(tea.WithEnvironment),
		"WithFPS":               reflect.ValueOf(tea.WithFPS),
		"WithFilter":            reflect.ValueOf(tea.WithFilter),
		"WithInput":             reflect.ValueOf(tea.WithInput),
		"WithInputTTY":          reflect.ValueOf(tea.WithInputTTY),
		"WithMouseAllMotion":    reflect.ValueOf(tea.WithMouseAllMotion),
		"WithMouseCellMotion":   reflect.ValueOf(tea.WithMouseCellMotion),
		"WithOutput":            reflect.ValueOf(tea.WithOutput),
		"WithReportFocus":       reflect.ValueOf(tea.WithReportFocus),
		"WithoutBracketedPaste": reflect.ValueOf(tea.WithoutBracketedPaste),
		"WithoutCatchPanics":    reflect.ValueOf(tea.WithoutCatchPanics),
		"WithoutRenderer":       reflect.ValueOf(tea.WithoutRenderer),
		"WithoutSignalHandler":  reflect.ValueOf(tea.WithoutSignalHandler),
		"WithoutSignals":        reflect.ValueOf(tea.WithoutSignals),

		// type definitions
		"BatchMsg":         reflect.ValueOf((*tea.BatchMsg)(nil)),
		"BlurMsg":          reflect.ValueOf((*tea.BlurMsg)(nil)),
		"Cmd":              reflect.ValueOf((*tea.Cmd)(nil)),
		"ExecCallback":     reflect.ValueOf((*tea.ExecCallback)(nil)),
		"ExecCommand":      reflect.ValueOf((*tea.ExecCommand)(nil)),
		"FocusMsg":         reflect.ValueOf((*tea.FocusMsg)(nil)),
		"InterruptMsg":     reflect.ValueOf((*tea.InterruptMsg)(nil)),
		"Key":              reflect.ValueOf((*tea.Key)(nil)),
		"KeyMsg":           reflect.ValueOf((*tea.KeyMsg)(nil)),
		"KeyType":          reflect.ValueOf((*tea.KeyType)(nil)),
		"LogOptionsSetter": reflect.ValueOf((*tea.LogOptionsSetter)(nil)),
		"Model":            reflect.ValueOf((*tea.Model)(nil)),
		"MouseAction":      reflect.ValueOf((*tea.MouseAction)(nil)),
		"MouseButton":      reflect.ValueOf((*tea.MouseButton)(nil)),
		"MouseEvent":       reflect.ValueOf((*tea.MouseEvent)(nil)),
		"MouseEventType":   reflect.ValueOf((*tea.MouseEventType)(nil)),
		"MouseMsg":         reflect.ValueOf((*tea.MouseMsg)(nil)),
		"Msg":              reflect.ValueOf((*tea.Msg)(nil)),
		"Program":          reflect.ValueOf((*tea.Program)(nil)),
		"ProgramOption":    reflect.ValueOf((*tea.ProgramOption)(nil)),
		"QuitMsg":          reflect.ValueOf((*tea.QuitMsg)(nil)),
		"ResumeMsg":        reflect.ValueOf((*tea.ResumeMsg)(nil)),
		"SuspendMsg":       reflect.ValueOf((*tea.SuspendMsg)(nil)),
		"WindowSizeMsg":    reflect.ValueOf((*tea.WindowSizeMsg)(nil)),

		// interface wrapper definitions
		"_ExecCommand":      reflect.ValueOf((*_github_com_charmbracelet_bubbletea_ExecCommand)(nil)),
		"_LogOptionsSetter": reflect.ValueOf((*_github_com_charmbracelet_bubbletea_LogOptionsSetter)(nil)),
		"_Model":            reflect.ValueOf((*_github_com_charmbracelet_bubbletea_Model)(nil)),
		"_Msg":              reflect.ValueOf((*_github_com_charmbracelet_bubbletea_Msg)(nil)),
	}
}

// _github_com_charmbracelet_bubbletea_ExecCommand is an interface wrapper for ExecCommand type
type _github_com_charmbracelet_bubbletea_ExecCommand struct {
	IValue     interface{}
	WRun       func() error
	WSetStderr func(a0 io.Writer)
	WSetStdin  func(a0 io.Reader)
	WSetStdout func(a0 io.Writer)
}

func (W _github_com_charmbracelet_bubbletea_ExecCommand) Run() error {
	return W.WRun()
}
func (W _github_com_charmbracelet_bubbletea_ExecCommand) SetStderr(a0 io.Writer) {
	W.WSetStderr(a0)
}
func (W _github_com_charmbracelet_bubbletea_ExecCommand) SetStdin(a0 io.Reader) {
	W.WSetStdin(a0)
}
func (W _github_com_charmbracelet_bubbletea_ExecCommand) SetStdout(a0 io.Writer) {
	W.WSetStdout(a0)
}

// _github_com_charmbracelet_bubbletea_LogOptionsSetter is an interface wrapper for LogOptionsSetter type
type _github_com_charmbracelet_bubbletea_LogOptionsSetter struct {
	IValue     interface{}
	WSetOutput func(a0 io.Writer)
	WSetPrefix func(a0 string)
}

func (W _github_com_charmbracelet_bubbletea_LogOptionsSetter) SetOutput(a0 io.Writer) {
	W.WSetOutput(a0)
}
func (W _github_com_charmbracelet_bubbletea_LogOptionsSetter) SetPrefix(a0 string) {
	W.WSetPrefix(a0)
}

// _github_com_charmbracelet_bubbletea_Model is an interface wrapper for Model type
type _github_com_charmbracelet_bubbletea_Model struct {
	IValue  interface{}
	WInit   func() tea.Cmd
	WUpdate func(a0 tea.Msg) (tea.Model, tea.Cmd)
	WView   func() string
}

func (W _github_com_charmbracelet_bubbletea_Model) Init() tea.Cmd {
	return W.WInit()
}
func (W _github_com_charmbracelet_bubbletea_Model) Update(a0 tea.Msg) (tea.Model, tea.Cmd) {
	return W.WUpdate(a0)
}
func (W _github_com_charmbracelet_bubbletea_Model) View() string {
	return W.WView()
}

// _github_com_charmbracelet_bubbletea_Msg is an interface wrapper for Msg type
type _github_com_charmbracelet_bubbletea_Msg struct {
	IValue interface{}
}
